= Getting Started with Py2neo

Py2neo communicates with a Neo4j database via its RESTful HTTP interface. A {{{GraphDatabaseService}}} is exposed via the Neo4j server facility under a specific URI which, as described in the offical Neo4j documentation, is [[http://localhost:7474/db/data/]] within a default installation.

A {{{GraphDatabaseService}}} can be accessed in py2neo simply by creating an instance of the class with the same name. This class exists within the {{{py2neo.neo4j}}} module and requires the URI under which the service is exposed as an argument. The code below shows how to create such a connection:

<<code lang="python">>
{{{
from py2neo import neo4j
graph_db = neo4j.GraphDatabaseService("http://localhost:7474/db/data/")
}}}
<</code>>

== Nodes

Once a connection has been established, nodes can be added to the graph using one of several methods. To create a single node, the {{{create_node}}} method can be used. If more than one node needs to be added, it is more efficient to use the batch creation method {{{create}}}. Finally, a Cypher {{{CREATE}}} statement can also be used. The code below illustrates these three node creation methods:

<<code lang="python">>
{{{
# create one node
a = graph_db.create_node({"name": "Alice"})

# create several nodes at once
b, c = graph_db.create(
    {"name": "Bob"},
    {"name": "Carol"}
}

# create a node using Cypher
from py2neo import cypher
query = "create d = {name: 'Dave'} return d"
data, metadata = cypher.execute(graph_db, query)
d = data[0][0]
}}}
<</code>>

Nodes within a graph can be accessed directly using either their ID or their URI. To retrieve a node by ID, simply use the {{{node}}} method of the associated graph or for URI access, use the {{{Node}}} constructor instead:

<<code lang="python">>
{{{
# access node by ID
my_node = graph_db.get_node(123)

# access node by URI
my_node = neo4j.Node("http://localhost:7474/db/data/node/123")
}}}
<</code>>

In addition, the total number of nodes in a graph can be established by a simple call to the {{{get_node_count}}} method. Don't forget that this includes the reference node.

<<code lang="python">>
{{{
node_count = graph_db.get_node_count()
}}}
<</code>>

== Relationships

Creating relationships is just as simple as creating nodes. The following code shows how to construct two nodes and a relationship between them using the {{{create_relationship_to}}} method of a {{{Node}}} object:

<<code lang="python">>
{{{
# attach to the graph
from py2neo import neo4j
graph_db = neo4j.GraphDatabaseService("http://localhost:7474/db/data/")

# create a pair of nodes
node_a, node_b = graph_db.create(
    {"name": "Alice"},
    {"name": "Bob"}
)

# join the nodes with a relationship
rel_ab = node_a.create_relationship_to(node_b, "KNOWS")
}}}
<</code>>

There are a number of ways to interrogate the relationship status of a node:

* [[http://packages.python.org/py2neo/py2neo.html#py2neo.neo4j.Node.get_related_nodes|get_related_nodes]] - find nodes related to this node
* [[http://packages.python.org/py2neo/py2neo.html#py2neo.neo4j.Node.get_relationships|get_relationships]] - find all relationships connected to this node
* [[http://packages.python.org/py2neo/py2neo.html#py2neo.neo4j.Node.get_single_related_node|get_single_related_node]] - retrieve a single related node
* [[http://packages.python.org/py2neo/py2neo.html#py2neo.neo4j.Node.get_single_relationship|get_single_relationship]] - retrieve a single relationship for this node
* [[http://packages.python.org/py2neo/py2neo.html#py2neo.neo4j.Node.has_relationship|has_relationship]] - establish the presence of a particular relationship
* [[http://packages.python.org/py2neo/py2neo.html#py2neo.neo4j.Node.is_related_to|is_related_to]] - establish whether or not two nodes are related

The following code illustrates how to test if the two nodes from the previous example are related:

<<code lang="python">>
{{{
# test if node_a and node_b are related in any way
if node_a.is_related_to(node_b):
    print "Yes!"

# test if node_a and node_b are related in a particular direction
if node_a.is_related_to(node_b, neo4j.Direction.OUTGOING):
    print "Yes!"

# test if node_a and node_b are related by a specific relationship
if node_a.is_related_to(node_b, neo4j.Direction.OUTGOING, "KNOWS"):
    print "Yes!"
}}}
<</code>>

