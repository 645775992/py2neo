--- bin/../src3/py2neo/geoff.py	(original)
+++ bin/../src3/py2neo/geoff.py	(refactored)
@@ -20,7 +20,7 @@
 
 
 import json
-import neo4j
+from . import neo4j
 import re
 
 
@@ -50,20 +50,20 @@
 			]))
 		self.write(self.eol.join([
 			"%s\t%s" % (
-				unicode(node),
+				str(node),
 				json.dumps(node.get_properties(), separators=(',',':'))
 			)
-			for node in nodes.values()
+			for node in list(nodes.values())
 		]))
 		self.write(self.eol)
 		self.write(self.eol.join([
 			"%s%s%s\t%s" % (
-				unicode(rel.get_start_node()),
-				unicode(rel),
-				unicode(rel.get_end_node()),
+				str(rel.get_start_node()),
+				str(rel),
+				str(rel.get_end_node()),
 				json.dumps(rel.get_properties(), separators=(',',':'))
 			)
-			for rel in rels.values()
+			for rel in list(rels.values())
 		]))
 
 
@@ -95,10 +95,10 @@
 			# firstly, try as a relationship descriptor
 			if m and m.group(3):
 				(start_node, name, type, end_node) = (
-					unicode(m.group(2)),
-					unicode(m.group(4)),
-					unicode(m.group(5)),
-					unicode(m.group(6))
+					str(m.group(2)),
+					str(m.group(4)),
+					str(m.group(5)),
+					str(m.group(6))
 				)
 				if start_node not in nodes or end_node not in nodes:
 					raise ValueError("Invalid node reference on line %d: %s" % (line_no, repr(m.group(1))))
@@ -111,7 +111,7 @@
 				continue
 			# secondly, try as a node descriptor
 			if m:
-				node_id = unicode(m.group(2))
+				node_id = str(m.group(2))
 				if node_id in nodes:
 					raise ValueError("Duplicate node on line %d: %s" % (line_no, repr(line)))
 				nodes[node_id] = json.loads(m.group(8) or 'null')
@@ -121,8 +121,8 @@
 			m = self.NODE_INDEX_ENTRY_PATTERN.match(line)
 			if m:
 				(index, node) = (
-					unicode(m.group(2)),
-					unicode(m.group(3))
+					str(m.group(2)),
+					str(m.group(3))
 				)
 				data = json.loads(m.group(5) or 'null')
 				if index not in index_entries:
@@ -138,12 +138,12 @@
 		if first_node_id is None:
 			return None
 		# unzip nodes into keys and data
-		z = zip(*nodes.items())
+		z = list(zip(*list(nodes.items())))
 		# create nodes using batch operation
-		nodes = dict(zip(*[
+		nodes = dict(list(zip(*[
 			z[0],
 			self.gdb.create_nodes(*z[1])
-		]))
+		])))
 		# create relationships
 		rels = self.gdb.create_relationships(*[
 			{
@@ -156,21 +156,21 @@
 		])
 		# create index entries
 		if len(index_entries) > 0:
-			for index_key in index_entries.keys():
+			for index_key in list(index_entries.keys()):
 				index = self.gdb.get_node_index(index_key)
 				index.start_batch()
-				for node_key in index_entries[index_key].keys():
+				for node_key in list(index_entries[index_key].keys()):
 					node = nodes[node_key]
-					for (key, value) in index_entries[index_key][node_key].items():
+					for (key, value) in list(index_entries[index_key][node_key].items()):
 						index.add(node, key, value)
 				index.submit_batch()
 		return nodes[first_node_id]
 
 
 try:
-	from cStringIO import StringIO
+	from io import StringIO
 except ImportError:
-	from StringIO import StringIO
+	from io import StringIO
 
 def dump(paths, file):
 	Dumper(file).dump(paths)
