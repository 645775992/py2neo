= py2neo

The py2neo project provides bindings between Python and Neo4j via its RESTful
web service interface. It attempts to be both Pythonic and consistent with the
core Neo4j API.

In addition, the project provides support for the Graph Export Object File
Format (Geoff). For further information on Geoff, visit
[http://geoff.nigelsmall.net/](http://geoff.nigelsmall.net/).


* Website:  http://py2neo.org/
* PyPI:     http://pypi.python.org/pypi/py2neo
* GitHub:   https://github.com/nigelsmall/py2neo
* Email:    Nigel Small <py2neo@nigelsmall.org>

== Requirements

Py2neo has been built against the following software:

* Neo4j 1.4+
* Python 2.6+
* Tornado 2.2.1

Other versions may work but are not guaranteed to do so.

== Installation

The easiest way to install py2neo is from the Python Package Index (PyPI). This
generally requires superuser privileges, so on Debian or Ubuntu, simply execute
the following:

{{{
$ sudo pip install py2neo
}}}
or
{{{
$ sudo easy_install py2neo
}}}

== Getting Started

The following short programme illustrates a simple usage of the py2neo library:

{{{
#!/usr/bin/env python

"""
Simple example showing node and relationship creation plus
execution of Cypher queries
"""

from __future__ import print_function

# Import Neo4j modules
from py2neo import neo4j, cypher

# Attach to the graph db instance
graph_db = neo4j.GraphDatabaseService("http://localhost:7474/db/data/")

# Create two nodes
node_a, node_b = graph_db.create_nodes(
        {"name": "Alice"},
        {"name": "Bob"}
)

# Join the nodes with a relationship
rel_ab = node_a.create_relationship_to(node_b, "KNOWS")

# Build a Cypher query
query = "START a=node({}) MATCH a-[:KNOWS]->b RETURN a,b".format(node_a.id)

# Define a row handler...
def print_row(row):
    a, b = row
    print(a["name"] + " knows " + b["name"])

# ...and execute the query
cypher.execute(query, graph_db, row_handler=print_row)
}}}


//Copyright 2011-2012 Nigel Small//
